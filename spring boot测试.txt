一、选择题（共12小题，每小题2.5分，共30分）
	以下不是spring boot优点的是 ( D )
		A．快速搭建项目
		B．简化配置  
		C．自动配置  
		D．无需容器
	Spring Boot配置，以下哪个优先级最高（A ）
		A、外置：xx.jar同目录下/config/application.properties；
		B、外置：xx.jar同目录下/config/application.yml；
		C、内置：src/main/resources/config；
		D、内置：src/main/resources
	以下log日志级别哪个最高（D）
		A、DEBUG
		B、INFO
		C、WARN
		D、ERROR
	以下不是spring boot的核心注解的是 (D  )
		A.	@SpringBootConfiguration
		B.	@EnableAutoConfiguration
		C.	@ComponentScan
		D.	@MapperScan  (mybatis的）
	要使用springMVC的功能，需要导入那个包 ( C )
		A．spring-boot-starter-jdbc  
		B．spring-boot-starter-thymeleaf  
		C．spring-boot-starter-web  
		D．mybatis-spring-boot-starter
	以下哪个注解不能加在类上 (感觉都可以  )
		A.	@Controller
		B.	@ResponseBody
		C.	@RestController
		D.	@RequestMapping
	当控制层上有@RestController注解时，方法中返回一个字符串“<h1>Hello</h1>”，浏览器调用的结果是 (A  )
		A. 一级标题显示的Hello（浏览器会解析）
		B.	找不到Hello.html
		C.	<h1>Hello</>
		D.	Hello
	SpringBoot项目中配置文件的格式 (C  )
		A．properties  
		B．yml  
		C．两者都可以
	不是SpringBoot核心配置文件是（ C）
		A.	bootstrap
		B.	application
		C.	application-dev（环境配置）
	前台使用json参数格式，控制器consumer、参数使用的注解是（A）
		A、application/josn ---- @RequestBody
		B、application/josn ---- @ModelAttribute
		C、application/x-www-form-urlencoded ---- @RequestBody
		D、application/x-www-form-urlencoded ---- @ModelAttribute
	@Pointcut("execution(public * com.thornBird.sbd.modules.*.controller.*.*(..))")，第三个*代表（C）
		A、代表返回类型不限
		B、代表module下所有子包
		C、代表所有类
		D、代表所有方法
	Url匹配风格中/admin*，以下哪个匹配不正确（D）
		A、/admin
		B、/admin1
		C、/admin123
		D、/admin/1
	Mybatis框架中，插入数据使用那个注解（B）
		A、@Update
		B、@Insert
		C、@Select
		D、@InsertMapping

二、填空题（共5小题，每小题5分，共25分）
	获取配置文件的属性值，使用哪个注解______@Value______；
	Java配置依赖的2个注解是______@Bean ____，___@Configuration________;
	Spring Boot修改tomcat端口号为9090应该怎么写？____server.port=9090________;
	自定义拦截器需要实现____HanlderInteceptor____接口；
	过滤器需要使用___@WebFilter___注解;
	上传文件，使用__MultiPartFile_接收文件对象，consumer使用___application/multipart-data__;

三、问答题（每题5分，共25分）
	阐述 Spring Boot 特性，举一个例子来解释 Staters 的内容；
                	快速开发，pom里面以starter形式，生成组类聚的多个jar，形成单条依赖，子类继承父类，实现了版本的控制
		内配置tomcat,不需要外部tomcat，监控的方便，注解开发，里面有很少的xml配置，如没有web.xml文件
		引入了log4j,springweb
	Mybatis传参中，#{*}、${*}的区别？
		#{*}:查询时会自动假如双引号，而且可以防止sql注入
		${*}:查询时直接进行字符串的拼接，多用出模糊查询，order by
		
		
	简述Restful规则？
               		书写中，不能有大写字母，不能有_，但可用-来连接，末尾不可以有/，
                                 一般书写方式如：
		/user  (用于get,post,put,delete)
		/user/{userId}  (get)
		/users  (post,get)
		添加用post,删除用delete，修改用put,
	简述Git使用流程，写几个常用Git命令？
               先把内容放到本地，让后pull到远程
                add(把内容提交到序列，在commit
               git clone  地址
               
	
	简述shiro两大功能实现流程；
	1.登录验证：
		1.在service层，创建Subject对象，创建令牌，把用户名和加密后的密码放入令牌里面，调用subject的login方法，把令牌放进去
		，底层会到我们自定义的MyRealm里面的验证方法里，(保证验证器，让数据库密码和前台传来的密码进行匹配）然后我们获取传过来的用户名，并去数据库查询是否有该用户，如果没有，
		我们自定义一个异常抛出去，如果有，就返回身份验证器
  	2.权限
	当前端遇到shiro标签，或者控制层遇到shiro注解，就进入MyRealm里的授权方法里，获取到用户对象，然后调用数据库的表，查看有什么权限，
            并把这些权限放入授权验证器里面去

四、编程题（每题10分，共20分）
	1、提供一个接口，返回 List<User> 列表，对该列表进行排序、保留10条数据；页面端使用 ajax post 方式提交请求，包装查询参数，获取接口返回数据，并遍历数据渲染到页面上 table 表格中；
	  @PostMapping("/users")
   	 public List<User> selectUserBySearch(@RequestBody Search search)；
             

    function getUsers(){
        var user=$("#form1").serialize();
        $.ajax({
            type:"post",
            dataType:"json",
            data:user,
            success:function(data){
                     var se="";
                for (let i = 0; i < data.length; i++) {
                    se+="<tr>" +
                        "<td >"+data[i].userId+"</td>" +
                        "<td >"+data[i].userName+"</td>" +
                        "<td >"+data[i].userPassword+"</td>" +
                        "<td >"+data[i].userImg+"</td>" +
                        "</tr>"
                }
                $("#table1").html(se)
            },
            error:function(){
                alert("error")
            }
        })
    }
	2、设计一套购物车接口，以 Cookie 或者 redis 实现
	 CookieUtil || ResitUtil 
	    读写数据 
	Product、shoppingCart、cartItem
	  序列化，反序列化
	ShoppingCartController
		/api/shoppingCart ----get---获取购物车
		/api/shoppingCart/{id} ----delete ----删除购物车
		/api/shoppingCart?items=1,2,3 -----get 
		/api/cartIem  ----post ----购物车添加item
		/api/cartItem/{id}   ----put  ----------修改
		/api/cartItem/{id} -------delete ----------删除item
		/api/cartItem/{id}  ---------delete----------删除item	